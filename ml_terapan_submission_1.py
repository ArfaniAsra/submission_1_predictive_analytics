# -*- coding: utf-8 -*-
"""ML-Terapan_Submission-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KGewu9HFs6S5z5HgcJgsrc7eMlswT9vQ

# Proyek Pertama : Predictive Analytics

## Domain Proyek

### Latar Belakang

Peningkatan konsumsi energi terbarukan telah menjadi salah satu prioritas utama dalam mitigasi perubahan iklim. Menurut laporan International Renewable Energy Agency (IRENA), pangsa energi terbarukan dalam total konsumsi energi global diproyeksikan mencapai 50% pada tahun 2050 untuk mencapai target nol emisi karbon bersih (*net-zero emissions*) [IRENA, 2023](https://www.irena.org/). Rumah tangga, sebagai konsumen utama energi, memiliki peran signifikan dalam transisi ini.

Namun, tingkat adopsi energi terbarukan bervariasi di antara rumah tangga, bergantung pada berbagai faktor seperti lokasi geografis, tingkat pendapatan, dan jenis energi yang tersedia. Sebuah studi oleh Hajra Amir (2024) [Kaggle](https://www.kaggle.com/datasets/hajraamir21/global-renewable-energy-usage-2020-2024) menunjukkan bahwa preferensi dan penggunaan energi rumah tangga dapat mencerminkan pola yang dapat dikelompokkan.

Menurut data dari *Renewable Energy Policy Network for the 21st Century* (REN21), meskipun konsumsi energi terbarukan global meningkat sebesar 8% setiap tahunnya, adopsi di sektor rumah tangga sering kali terhambat oleh faktor ekonomi dan geografis [REN21, 2023](https://www.ren21.net/). Salah satu kendala utama adalah minimnya informasi bagi penyedia layanan energi untuk memahami kebutuhan spesifik setiap kelompok rumah tangga.

Mengapa memahami pola ini penting? Dengan segmentasi rumah tangga, penyedia layanan energi dapat:
1. Mengidentifikasi kelompok rumah tangga yang membutuhkan insentif untuk mengadopsi energi terbarukan.
2. Merancang strategi distribusi energi yang lebih efisien dan sesuai kebutuhan.
3. Mendukung kebijakan pemerintah dalam meningkatkan aksesibilitas energi terbarukan.
4. Mengatasi ketimpangan akses energi terbarukan antara wilayah perkotaan dan pedesaan.

Proyek ini bertujuan untuk mengelompokkan rumah tangga berdasarkan pola penggunaan energi mereka, menggunakan data yang mencakup berbagai wilayah dan jenis energi terbarukan dari tahun 2020 hingga 2024. Dengan pendekatan ini, diharapkan hasil proyek dapat memberikan wawasan strategis untuk meningkatkan efisiensi energi secara global.

## Business Understanding

### A. Problem Statements

1. Bagaimana pola penggunaan energi rumah tangga dapat dikelompokkan berdasarkan sumber energi terbarukan?
2. Apakah terdapat perbedaan signifikan dalam pola konsumsi energi rumah tangga di berbagai wilayah geografis?
3. Faktor apa saja yang membedakan rumah tangga dalam segmen-segmen yang dihasilkan?

### B. Goals/Tujuan

1. Mengidentifikasi kelompok-kelompok rumah tangga dengan pola penggunaan energi yang serupa.
2. Memahami karakteristik utama yang membedakan setiap kelompok rumah tangga berdasarkan faktor seperti sumber energi, lokasi, dan tingkat pendapatan.
3. Memberikan wawasan yang dapat digunakan penyedia layanan energi untuk meningkatkan efisiensi distribusi energi terbarukan.

### C. Solution Statement

Untuk mencapai tujuan proyek, dilakukan pendekatan berikut:

1. **Exploratory Data Analysis (EDA)**
   - Mengeksplorasi distribusi konsumsi energi bulanan, ukuran rumah tangga, tingkat pendapatan, dan penggunaan energi berdasarkan sumber energi.
   - Visualisasi data dengan teknik seperti histogram, boxplot, atau scatter plot untuk memahami hubungan antar fitur.

2. **Clustering dengan Algoritma Machine Learning**
   - **KMeans**: Algoritma ini direkomendasikan untuk dataset yang memiliki jumlah klaster yang jelas, serta ketika dataset dapat dinormalisasi dengan baik. KMeans bekerja dengan menentukan centroid secara iteratif, menjadikannya efisien untuk data numerik.
   - **DBSCAN**: Jika dataset menunjukkan pola distribusi yang tidak beraturan atau terdapat outlier signifikan, DBSCAN dapat menjadi alternatif yang lebih baik karena algoritma ini tidak memerlukan penentuan jumlah klaster sebelumnya dan mampu mengidentifikasi outlier sebagai noise.
   - **Hierarchical Clustering**: Jika tujuan analisis melibatkan pemahaman hubungan hierarkis antara kelompok, algoritma ini dapat memberikan dendrogram yang merepresentasikan struktur data.

   Pada tahap awal, **KMeans** akan digunakan untuk kemudahan dan efisiensi. Hasilnya kemudian dapat divalidasi dengan DBSCAN atau Hierarchical Clustering untuk memastikan robustnya hasil segmentasi.

3. **Analisis dan Visualisasi Klaster**
   - Menginterpretasikan hasil klaster dengan menganalisis distribusi fitur dalam setiap klaster.
   - Menggunakan PCA (Principal Component Analysis) untuk visualisasi klaster dalam ruang berdimensi rendah.

## Data Understanding

### Sumber Dataset

Dataset yang digunakan pada proyek ini diambil dari [Kaggle](https://www.kaggle.com/datasets/hajraamir21/global-renewable-energy-usage-2020-2024). Dataset ini mencakup informasi tentang konsumsi energi rumah tangga dari tahun 2020 hingga 2024 di berbagai wilayah geografis, termasuk jenis energi yang digunakan, ukuran rumah tangga, dan faktor ekonomi seperti tingkat pendapatan. Data ini memberikan landasan yang kuat untuk melakukan analisis segmentasi.

### Karakteristik Dataset

Dataset berisi 1000 entri dengan 12 kolom yang mencakup berbagai informasi tentang rumah tangga dan pola konsumsi energi mereka. Berikut adalah rincian setiap kolom:

1. **Household_ID**: ID unik untuk setiap rumah tangga.
2. **Region**: Wilayah geografis rumah tangga (misalnya, North America, Europe, Africa).
3. **Country**: Negara tempat rumah tangga berada.
4. **Energy_Source**: Jenis energi terbarukan yang digunakan (Hydro, Wind, Biomass, Geothermal, Solar).
5. **Monthly_Usage_kWh**: Jumlah konsumsi energi bulanan dalam kWh.
6. **Year**: Tahun pencatatan data.
7. **Household_Size**: Jumlah anggota dalam rumah tangga.
8. **Income_Level**: Tingkat pendapatan rumah tangga (Low, Middle, High).
9. **Urban_Rural**: Lokasi rumah tangga, apakah di area perkotaan (Urban) atau pedesaan (Rural).
10. **Adoption_Year**: Tahun adopsi energi terbarukan oleh rumah tangga.
11. **Subsidy_Received**: Indikator apakah rumah tangga menerima subsidi untuk energi terbarukan (Yes/No).
12. **Cost_Savings_USD**: Jumlah penghematan biaya dalam USD karena penggunaan energi terbarukan.

**Statistik Deskriptif**
- **Monthly_Usage_kWh**:
  - Rata-rata: 767.3 kWh
  - Minimum: 50.74 kWh
  - Maksimum: 1497.34 kWh
- **Household_Size**:
  - Rata-rata: 4.48 anggota
  - Minimum: 1 anggota
  - Maksimum: 8 anggota
- **Cost_Savings_USD**:
  - Rata-rata: $248.39
  - Minimum: $10.42
  - Maksimum: $499.83

**Distribusi Data**
1. **Energy_Source**: Lima kategori utama dengan distribusi sebagai berikut:
   - Hydro: 227 rumah tangga
   - Wind: 203 rumah tangga
   - Biomass: 189 rumah tangga
   - Geothermal: 195 rumah tangga
   - Solar: 186 rumah tangga

2. **Region**: Enam wilayah utama dengan distribusi sebagai berikut:
   - North America: 210 rumah tangga
   - Europe: 173 rumah tangga
   - Asia: 165 rumah tangga
   - Africa: 157 rumah tangga
   - South America: 150 rumah tangga
   - Australia: 145 rumah tangga

3. **Income_Level**:
   - Low: 308 rumah tangga
   - Middle: 358 rumah tangga
   - High: 334 rumah tangga

## Importing Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score, davies_bouldin_score

"""## Data Loading"""

dataset_source = "https://raw.githubusercontent.com/ArfaniAsra/Dicoding_ML_Terapan_Submission_Predictive_Analytics/refs/heads/main/Renewable_Energy_Usage.csv"
df = pd.read_csv(dataset_source)

df.head()

"""## Assessing Data"""

df.info()

# Checking for null values
print("\nMissing Values:")
df.isnull().sum()

print("Jumlah duplikasi: ", df.duplicated().sum())

df.describe()

"""## Exploratory Data Analysis

**Summary of Numerical and Categorical Features**
"""

df.describe(include="all")

# Set the style for the plots
sns.set(style="whitegrid")

"""**Numerical Features Analysis**"""

# Visualizing the distribution of numerical features
numerical_features = ['Monthly_Usage_kWh', 'Household_Size', 'Cost_Savings_USD']

for feature in numerical_features:
    plt.figure(figsize=(8, 5))
    sns.histplot(df[feature], kde=True, bins=30, color='blue')
    plt.title(f"Distribution of {feature}")
    plt.xlabel(feature)
    plt.ylabel("Frequency")
    plt.show()

# Pairplot for relationships between numerical features
sns.pairplot(df, vars=['Monthly_Usage_kWh', 'Household_Size', 'Cost_Savings_USD'], kind='scatter', diag_kind='kde')
plt.show()

"""**Categorical Features Analysis**"""

# Visualizing categorical features
categorical_features = ['Region', 'Energy_Source', 'Income_Level', 'Urban_Rural', 'Subsidy_Received']

for feature in categorical_features:
    plt.figure(figsize=(10, 6))
    sns.countplot(data=df, x=feature, order=df[feature].value_counts().index)
    plt.title(f"Distribution of {feature}")
    plt.xlabel(feature)
    plt.ylabel("Count")
    plt.xticks(rotation=45)
    plt.show()

"""**Multivariate Analysis**"""

# Correlation Analysis for numerical features
correlation_matrix = df[numerical_features].corr()

# Plotting the heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Matrix for Numerical Features")
plt.show()

# Exploring relationships between categorical and numerical data
plt.figure(figsize=(12, 8))
sns.boxplot(data=df, x='Income_Level', y='Monthly_Usage_kWh', order=['Low', 'Middle', 'High'])
plt.title("Monthly Energy Usage vs Income Level")
plt.xlabel("Income Level")
plt.ylabel("Monthly Energy Usage (kWh)")
plt.show()

plt.figure(figsize=(12, 8))
sns.boxplot(data=df, x='Region', y='Cost_Savings_USD', order=df['Region'].value_counts().index)
plt.title("Cost Savings Distribution by Region")
plt.xlabel("Region")
plt.ylabel("Cost Savings (USD)")
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(12, 8))
sns.boxplot(data=df, x='Energy_Source', y='Monthly_Usage_kWh', order=df['Energy_Source'].value_counts().index)
plt.title("Monthly Energy Usage vs Energy Source")
plt.xlabel("Energy Source")
plt.ylabel("Monthly Energy Usage (kWh)")
plt.xticks(rotation=45)
plt.show()

"""**Outlier Detection**"""

# Outlier detection for numerical features

for feature in numerical_features:
    plt.figure(figsize=(8, 5))
    sns.boxplot(data=df, y=feature)
    plt.title(f"Outlier Detection for {feature}")
    plt.ylabel(feature)
    plt.show()

"""**Relationship Analysis for Specific Cases**"""

# 6. Relationship Analysis for Specific Cases
plt.figure(figsize=(12, 8))
sns.boxplot(data=df, x='Energy_Source', y='Cost_Savings_USD', order=df['Energy_Source'].value_counts().index)
plt.title("Cost Savings by Energy Source")
plt.xlabel("Energy Source")
plt.ylabel("Cost Savings (USD)")
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(12, 8))
sns.boxplot(data=df, x='Subsidy_Received', y='Monthly_Usage_kWh', order=df['Subsidy_Received'].value_counts().index)
plt.title("Monthly Energy Usage by Subsidy Received")
plt.xlabel("Subsidy Received")
plt.ylabel("Monthly Energy Usage (kWh)")
plt.show()

"""**Time-Based Analysis**"""

# 7. Time-Based Analysis (if Year or Adoption_Year exists)
if 'Year' in df.columns or 'Adoption_Year' in df.columns:
    time_feature = 'Year' if 'Year' in df.columns else 'Adoption_Year'
    plt.figure(figsize=(12, 6))
    sns.lineplot(data=df, x=time_feature, y='Monthly_Usage_kWh', estimator='mean')
    plt.title("Average Monthly Usage Over Time")
    plt.xlabel(time_feature)
    plt.ylabel("Average Monthly Usage (kWh)")
    plt.show()

"""**Dimensionality Reduction (PCA)**"""

# 8. Dimensionality Reduction (PCA)
pca = PCA(n_components=2)
pca_data = pca.fit_transform(df[numerical_features])
pca_df = pd.DataFrame(pca_data, columns=['PCA1', 'PCA2'])
pca_df['Region'] = df['Region']
plt.figure(figsize=(10, 6))
sns.scatterplot(data=pca_df, x='PCA1', y='PCA2', hue='Region', palette='Set2')
plt.title("PCA Scatterplot by Region")
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.legend(title='Region', bbox_to_anchor=(1, 1))
plt.show()

"""**Interaction Analysis Between Categories**"""

# 9. Interaction Analysis Between Categories
plt.figure(figsize=(12, 6))
sns.heatmap(pd.crosstab(df['Region'], df['Income_Level']), annot=True, cmap="Blues", fmt="d")
plt.title("Interaction Between Region and Income Level")
plt.xlabel("Income Level")
plt.ylabel("Region")
plt.show()

"""## Data Preparation"""

# Copy the original dataframe to preserve raw data
data_prep = df.copy()

# 3. Encoding Data Kategorikal
categorical_features = ['Region', 'Energy_Source', 'Income_Level', 'Urban_Rural', 'Subsidy_Received']

# One-Hot Encoding for features with multiple categories
one_hot_features = ['Region', 'Energy_Source']
one_hot_encoder = OneHotEncoder(sparse_output=False, drop='first')
one_hot_encoded = one_hot_encoder.fit_transform(data_prep[one_hot_features])
one_hot_encoded_df = pd.DataFrame(one_hot_encoded, columns=one_hot_encoder.get_feature_names_out(one_hot_features))
data_prep = pd.concat([data_prep, one_hot_encoded_df], axis=1)
data_prep.drop(columns=one_hot_features, inplace=True)

# Label Encoding for features with ordinal relationships
label_encoders = {}
ordinal_features = ['Income_Level', 'Urban_Rural', 'Subsidy_Received']
for feature in ordinal_features:
    le = LabelEncoder()
    data_prep[feature] = le.fit_transform(data_prep[feature])
    label_encoders[feature] = le

# 4. Normalisasi Data Numerik
numerical_features = ['Monthly_Usage_kWh', 'Household_Size', 'Cost_Savings_USD']
scaler = StandardScaler()
data_prep[numerical_features] = scaler.fit_transform(data_prep[numerical_features])

# 5. Outlier Handling
# Replace extreme outliers (beyond 3 standard deviations) with upper/lower threshold
for feature in numerical_features:
    mean = data_prep[feature].mean()
    std_dev = data_prep[feature].std()
    upper_limit = mean + 3 * std_dev
    lower_limit = mean - 3 * std_dev
    data_prep[feature] = np.clip(data_prep[feature], lower_limit, upper_limit)

# 6. Feature Engineering
# Add feature: Cost Savings per kWh
# Avoid division by zero
data_prep['Cost_Savings_Per_kWh'] = data_prep['Cost_Savings_USD'] / (data_prep['Monthly_Usage_kWh'] + 1e-9)

# Add feature: Energy Usage per Household Member
data_prep['Energy_Usage_Per_Member'] = data_prep['Monthly_Usage_kWh'] / (data_prep['Household_Size'] + 1e-9)

# 8. Cek Hasil Akhir
print("\nHasil Data Preparation:")
data_prep.head()

"""## Modelling"""

# Drop non-relevant columns for clustering
non_relevant_columns = ['Household_ID', 'Country', 'Year', 'Adoption_Year']
data_prep = data_prep.drop(columns=non_relevant_columns, errors='ignore')

# 1. Menentukan Jumlah Klaster Optimal (Elbow Method)
inertia = []
silhouette_scores = []
K_range = range(2, 11)

for K in K_range:
    kmeans = KMeans(n_clusters=K, random_state=42, n_init=10)
    kmeans.fit(data_prep)
    inertia.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(data_prep, kmeans.labels_))

# Plot Elbow Method
plt.figure(figsize=(8, 5))
plt.plot(K_range, inertia, marker='o')
plt.title('Elbow Method for Optimal K')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Inertia')
plt.grid()
plt.show()

# Plot Silhouette Scores
plt.figure(figsize=(8, 5))
plt.plot(K_range, silhouette_scores, marker='o', color='orange')
plt.title('Silhouette Scores for Different K')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Silhouette Score')
plt.grid()
plt.show()

# 2. Menerapkan KMeans dengan K Optimal
optimal_K = silhouette_scores.index(max(silhouette_scores)) + 2  # Offset K_range start
print(f"Optimal K berdasarkan Silhouette Score: {optimal_K}")

kmeans = KMeans(n_clusters=optimal_K, random_state=42, n_init=10)
kmeans.fit(data_prep)
data_prep['Cluster'] = kmeans.labels_

# 3. Visualisasi Klaster dengan PCA
pca = PCA(n_components=2)
pca_data = pca.fit_transform(data_prep.drop(columns=['Cluster']))
pca_df = pd.DataFrame(pca_data, columns=['PCA1', 'PCA2'])
pca_df['Cluster'] = data_prep['Cluster']

plt.figure(figsize=(10, 6))
sns.scatterplot(data=pca_df, x='PCA1', y='PCA2', hue='Cluster', palette='Set2', s=50)
plt.title(f'Clustering Visualization (K={optimal_K})')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend(title='Cluster')
plt.grid()
plt.show()



"""**Analisis Karakteristik Klaster**"""

# 1. Analisis Deskriptif Fitur Numerik per Klaster
numerical_features = ['Monthly_Usage_kWh', 'Cost_Savings_USD', 'Household_Size', 'Cost_Savings_Per_kWh', 'Energy_Usage_Per_Member']
numerical_summary = data_prep.groupby('Cluster')[numerical_features].mean()
print("\nRata-Rata Fitur Numerik per Klaster:\n", numerical_summary)

# Visualisasi Distribusi Numerik
for feature in numerical_features:
    plt.figure(figsize=(10, 6))
    sns.boxplot(data=data_prep, x='Cluster', y=feature, palette='Set2')
    plt.title(f'Distribusi {feature} per Klaster')
    plt.xlabel('Cluster')
    plt.ylabel(feature)
    plt.grid()
    plt.show()

# 2. Analisis Fitur Kategorikal per Klaster
categorical_features = ['Income_Level', 'Urban_Rural', 'Subsidy_Received']
for feature in categorical_features:
    plt.figure(figsize=(10, 6))
    sns.countplot(data=data_prep, x=feature, hue='Cluster', palette='Set2')
    plt.title(f'Distribusi {feature} per Klaster')
    plt.xlabel(feature)
    plt.ylabel('Count')
    plt.legend(title='Cluster')
    plt.grid()
    plt.show()

# 3. Distribusi Fitur Region dan Energy_Source
region_features = [col for col in data_prep.columns if col.startswith('Region_')]
energy_features = [col for col in data_prep.columns if col.startswith('Energy_Source_')]

# Distribusi Region
region_summary = data_prep.groupby('Cluster')[region_features].mean()
print("\nDistribusi Region per Klaster:\n", region_summary)

# Distribusi Energy Source
energy_summary = data_prep.groupby('Cluster')[energy_features].mean()
print("\nDistribusi Energy Source per Klaster:\n", energy_summary)

# Visualisasi Distribusi Region dan Energy Source
for feature_group, feature_list in zip(['Region', 'Energy_Source'], [region_features, energy_features]):
    for feature in feature_list:
        plt.figure(figsize=(10, 6))
        sns.barplot(data=data_prep, x='Cluster', y=feature, palette='Set2')
        plt.title(f'Distribusi {feature_group} ({feature}) per Klaster')
        plt.xlabel('Cluster')
        plt.ylabel(feature)
        plt.grid()
        plt.show()

# 2. Hierarchical Clustering
n_clusters = 2

# Apply Agglomerative Clustering
hierarchical = AgglomerativeClustering(n_clusters=n_clusters, linkage='ward')
hierarchical_labels = hierarchical.fit_predict(data_prep)
data_prep['Hierarchical_Cluster'] = hierarchical_labels

# Evaluate Hierarchical Clustering
silhouette_hierarchical = silhouette_score(data_prep, hierarchical_labels)
db_index_hierarchical = davies_bouldin_score(data_prep, hierarchical_labels)
print(f"Silhouette Score for Hierarchical Clustering: {silhouette_hierarchical}")
print(f"Davies-Bouldin Index for Hierarchical Clustering: {db_index_hierarchical}")

# Visualize Hierarchical Clusters
plt.figure(figsize=(10, 6))
# Access the data using .iloc for integer-location based indexing
sns.scatterplot(x=data_prep.iloc[:, 0], y=data_prep.iloc[:, 1], hue=hierarchical_labels, palette='Set2', s=50)
plt.title("Hierarchical Clustering Visualization")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.legend(title='Cluster')
plt.grid()
plt.show()

"""## Evaluation"""

# Menghitung silhouette score untuk model clustering
silhouette_kmeans = silhouette_score(data_prep.drop(columns=['Cluster']), data_prep['Cluster'])
print(f"Silhouette Score rata-rata: {silhouette_kmeans}")

# Menghitung Davies-Bouldin Index
db_index_kmeans = davies_bouldin_score(data_prep.drop(columns=['Cluster']), data_prep['Cluster'])
print(f"Davies-Bouldin Index: {db_index_kmeans}")

# 3. Visualisasi dengan PCA
pca = PCA(n_components=2)
pca_data = pca.fit_transform(data_prep.drop(columns=['Cluster']))
pca_df = pd.DataFrame(pca_data, columns=['PCA1', 'PCA2'])
pca_df['Cluster'] = data_prep['Cluster']

plt.figure(figsize=(10, 6))
sns.scatterplot(data=pca_df, x='PCA1', y='PCA2', hue='Cluster', palette='Set2', s=50)
plt.title('Clustering Visualization using PCA')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend(title='Cluster')
plt.grid()
plt.show()

# 4. Distribusi Silhouette Score per Sampel
from sklearn.metrics import silhouette_samples

sample_silhouette_values = silhouette_samples(data_prep.drop(columns=['Cluster']), data_prep['Cluster'])
data_prep['Silhouette_Value'] = sample_silhouette_values

plt.figure(figsize=(10, 6))
sns.boxplot(data=data_prep, x='Cluster', y='Silhouette_Value', palette='Set2')
plt.title('Silhouette Values per Cluster')
plt.xlabel('Cluster')
plt.ylabel('Silhouette Value')
plt.grid()
plt.show()

# 5. Evaluasi Intra-cluster Distance (Inertia)
inertia_values = []
K_range = range(2, 11)
for K in K_range:
    kmeans = KMeans(n_clusters=K, random_state=42, n_init=10)
    kmeans.fit(data_prep.drop(columns=['Cluster', 'Silhouette_Value']))
    inertia_values.append(kmeans.inertia_)

plt.figure(figsize=(8, 5))
plt.plot(K_range, inertia_values, marker='o')
plt.title('Inertia Values for Different K')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Inertia')
plt.grid()
plt.show()

# Evaluate Hierarchical Clustering
silhouette_hierarchical = silhouette_score(data_prep, hierarchical_labels)
db_index_hierarchical = davies_bouldin_score(data_prep, hierarchical_labels)

print(f"Silhouette Score for Hierarchical Clustering: {silhouette_hierarchical}")
print(f"Davies-Bouldin Index for Hierarchical Clustering: {db_index_hierarchical}")

# Compare with K-Means
print("\nComparison:")
print(f"K-Means Silhouette Score: {silhouette_kmeans}")
print(f"K-Means Davies-Bouldin Index: {db_index_kmeans}")
print(f"Hierarchical Silhouette Score: {silhouette_hierarchical}")
print(f"Hierarchical Davies-Bouldin Index: {db_index_hierarchical}")

# Visualize Dendrogram
from scipy.cluster.hierarchy import dendrogram, linkage

plt.figure(figsize=(12, 6))
linkage_matrix = linkage(data_prep, method='ward')  # Replace with data_prep
dendrogram(linkage_matrix)
plt.title("Hierarchical Clustering Dendrogram")
plt.xlabel("Sample Index")
plt.ylabel("Distance")
plt.show()

"""## Conclusion

Proyek klasterisasi energi terbarukan ini dilakukan untuk mengidentifikasi pola penggunaan energi rumah tangga, penghematan biaya, dan distribusi subsidi. Temuan utama dan insight yang diperoleh melalui pipeline machine learning yang sistematis ini dirangkum sebagai berikut:

1. **Pola Data dan Insight:**
   - Rumah tangga berhasil dikelompokkan ke dalam klaster berdasarkan penggunaan energi, penghematan biaya, dan status subsidi.
   - Fitur utama seperti *Monthly_Usage_kWh*, *Cost_Savings_USD*, dan *Energy_Source* menunjukkan pola yang berbeda pada masing-masing klaster, memberikan wawasan yang dapat ditindaklanjuti untuk memahami karakteristik setiap kelompok.
   - Hierarchical Clustering diidentifikasi sebagai metode optimal untuk segmentasi, dengan **Silhouette Score (0.857)** yang tinggi dan **Davies-Bouldin Index (0.101)** yang rendah, menunjukkan klaster yang jelas dan terpisah dengan baik.

2. **Karakteristik Klaster:**
   - **Klaster 0:** Mewakili rumah tangga dengan penggunaan energi dan penghematan biaya yang moderat, sering dikaitkan dengan sumber energi terbarukan seperti tenaga surya dan angin.
   - **Klaster 1:** Mewakili rumah tangga dengan subsidi yang lebih tinggi dan penghematan per kWh yang secara signifikan lebih besar, menunjukkan dukungan finansial yang ditargetkan dari kebijakan energi terbarukan.

3. **Kinerja Model:**
   - K-Means Clustering juga memberikan hasil yang baik dengan K=2, yang divalidasi melalui analisis inertia dan silhouette.
   - Hierarchical Clustering memberikan pembagian klaster yang sedikit lebih baik, selaras dengan tujuan proyek untuk menghasilkan segmentasi yang dapat diinterpretasikan.

**Pertanyaan Bisnis yang Terjawab:**

**1. Bagaimana pola penggunaan energi rumah tangga dapat dikelompokkan berdasarkan sumber energi terbarukan?**
Pola penggunaan energi rumah tangga berhasil dikelompokkan menggunakan algoritma clustering:
- **Metode yang Digunakan**:
  - K-Means Clustering (K=2).
  - Hierarchical Clustering.
- **Hasil Klasterisasi**:
  - Rumah tangga terbagi menjadi dua klaster utama:
    - **Klaster 0**: Didominasi oleh rumah tangga dengan konsumsi energi lebih rendah, sering menggunakan sumber energi seperti tenaga angin dan surya.
    - **Klaster 1**: Rumah tangga dengan efisiensi biaya tinggi dan lebih sering mengandalkan energi seperti geothermal dan solar.
- **Fitur yang Membentuk Pola**:
  - *Energy_Source* (misalnya, Solar, Wind, Geothermal) memainkan peran penting dalam membedakan pola konsumsi energi rumah tangga.
- **Visualisasi**:
  - Scatter plot dan PCA menunjukkan bahwa sumber energi memiliki pengaruh besar terhadap segmentasi rumah tangga.

**2. Apakah terdapat perbedaan signifikan dalam pola konsumsi energi rumah tangga di berbagai wilayah geografis?**
Ya, perbedaan pola konsumsi energi berdasarkan wilayah geografis telah ditemukan:
- **Distribusi Geografis**:
  - Wilayah seperti Eropa dan Amerika Utara memiliki konsumsi energi yang lebih tinggi per rumah tangga dibanding wilayah lain.
  - Wilayah Afrika lebih sering menggunakan energi surya karena ketersediaan dan kepraktisannya.
- **Fitur Geografis yang Signifikan**:
  - *Region* (Asia, Eropa, Afrika) memengaruhi pola konsumsi energi.
  - Visualisasi distribusi wilayah per klaster menunjukkan perbedaan signifikan dalam adopsi energi terbarukan berdasarkan lokasi.

**3. Faktor apa saja yang membedakan rumah tangga dalam segmen-segmen yang dihasilkan?**
Faktor utama yang membedakan rumah tangga dalam klaster meliputi:
1. **Konsumsi Energi Bulanan (*Monthly_Usage_kWh*)**:
   - Klaster 1 memiliki konsumsi energi lebih tinggi dibanding Klaster 0.
2. **Efisiensi Biaya Energi (*Cost_Savings_Per_kWh*)**:
   - Klaster 1 menunjukkan efisiensi biaya yang jauh lebih tinggi dibandingkan Klaster 0.
3. **Ukuran Rumah Tangga (*Household_Size*)**:
   - Rumah tangga di Klaster 1 cenderung lebih besar, mencerminkan kebutuhan energi yang lebih tinggi.
4. **Pendapatan Rumah Tangga (*Income_Level*)**:
   - Klaster 0 lebih banyak terdiri dari rumah tangga berpendapatan rendah hingga menengah, sementara Klaster 1 lebih didominasi oleh pendapatan tinggi.

### Rekomendasi:
- **Implementasi Kebijakan:** Tingkatkan kesadaran dan aksesibilitas energi terbarukan di wilayah dengan karakteristik serupa dengan Klaster 0 untuk memaksimalkan adopsi.
- **Penelitian Lanjutan:** Validasi temuan ini dengan dataset tambahan, khususnya yang berfokus pada infrastruktur energi regional dan aspek perilaku.
- **Aplikasi Operasional:** Manfaatkan hasil klasterisasi ini untuk segmentasi rumah tangga dalam kampanye yang disesuaikan dan alokasi sumber daya yang lebih efisien.
"""